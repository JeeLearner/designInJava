1.单一职责原则（一个类的定义）Single ResponsibilityPrinciple：
    一个合理的类，应该仅有一个引起它变化的原因，即单一职责,就是设计的这个类功能应该只有一个;
　　优点：消除耦合，减小因需求变化引起代码僵化。

2.OCP（开闭原则，Open-Closed Principle）：
      一个软件的实体应当对扩展开放，对修改关闭。也就是说如果你要对一个已存在的系统做扩展的时候尽量要新增加类，而不是在原有的基础上修改。
      增加新功能，不改变原有代码。
      设计要对扩展有好的支持，而对修改要严格限制。
　　  优点：降低了程序各部分之间的耦合性，其适应性、灵活性、稳定性都比较好。当已有软件系统需要增加新的功能时，不需要对作为系统基础的抽象层进行修改，只需要在原有基础上附加新的模块就能实现所需要添加的功能。增加的新模块对原有的模块完全没有影响或影响很小，这样就无须为原有模块进行重新测试。

3.DIP（依赖倒转原则，Dependence Inversion Principle） 依赖接口、 抽象类
       针对接口编程，不要针对实现编程。
       “设计要依赖于抽象而不是具体化”。换句话说就是设计的时候我们要用抽象来思考，而不是一上来就开始划分我需要哪些哪些类，因为这些是具体。
       优点：人的思维本身实际上就是很抽象的，我们分析问题的时候不是一下子就考虑到细节，而是很抽象的将整个问题都构思出来，所以面向抽象设计是符合人的思维的。另外这个原则会很好的支持（开闭原则）OCP，面向抽象的设计使我们能够不必太多依赖于实现，这样扩展就成为了可能，这个原则也是另一篇文章《Design by Contract》的基石。

4.里氏代换原则（继承后的重写，指导继承的设计）Liskov Substitution Principle：
    父类出现的地方可以被子类替换，在替换后依然保持原功能。
        子类要拥有父类的所有功能。
        子类在重写父类方法时，尽量选择扩展重写，防止改变了功能。
    很严格的原则，规则是“子类必须能够替换基类，否则不应当设计为其子类。”也就是说，子类只能去扩展基类，而不是隐藏或覆盖基类，
　　优点：可以很容易的实现同一父类下各个子类的互换，而客户端可以毫不察觉。

5.接口隔离原则（功能拆分） Interface Segregation Principle
    “将大的接口打散成多个小接口”，让系统解耦，从而容易重构，更改和重新部署。
　　优点：会使一个软件系统功能扩展时，修改的压力不会传到别的对象那里。

6.LoD（迪米特法则，Law Of Demeter）（类与类交互的原则）
    只与你直接的朋友通信，而避免和陌生人通信。一个类尽量少的依赖其他类
    迪米特法则或最少知识原则，这个原则首次在Demeter系统中得到正式运用，所以定义为迪米特法则。它讲的是“一个对象应当尽可能少的去了解其他对象”。
　　优点：消除耦合。

7.组合复用原则（复用的最佳实践）Composite Reuse Principle
    如果仅仅为了代码复用优先选择组合复用，而非继承复用。
    组合的耦合性相对继承低。

8.面向接口编程而非面向实现（切换、并行开发）
    客户端通过一系列抽象操作实例，而无需关注具体类型。
    便于灵活切换一系列功能。
    实现软件的并行开发。