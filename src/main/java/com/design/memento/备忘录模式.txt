一、备忘录模式介绍
备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。

例如：
    1.office重新打开时的恢复功能。
    2.事务的回滚操作

角色：
    Originator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。
            Originator可根据需要决定Memento存储Originator的哪些内部状态
    Memento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。
        备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据。
    Caretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内存进行操作或检查。

开发中常见场景：
    棋类游戏中的悔棋操作
    软件中的撤销操作
    数据库中的事务回滚操作
    常用软件中的历史记录功能



demo1_1 单次备份  以一个Emp实体对象来作为例子
        1）EmpOriginator.java 首先，创建一个发起人：发起人内部保存着需要备忘的属性，它负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。
        2）EmpMemento.java 创建备忘录对象：备忘录就是用来备份发起人的数据，所以构造器需要提供一个发起人对象
        3）CareTaker.java  开始创建一个备忘录的管理者
        4）单次备份测试：测试只能备份一次的备忘录
 但是，这样的效果是只能备份一次。有时候我们需要备份多个点，根据需要来还原具体哪次的数据

demo1_2 多次备份
    使用Stack来存储备份数据，进行多次备份。用Stack的好处是Stack是后进先出的，也就是说：你最近一次备份的数据会优先获取到。

