一、组合模式介绍
组合模式：将对象组合成树形结构以表示：部分--整体 的层次结构。
          组合模式使得用户对单个对象和组合对象的使用具有一致性。

    java中的组合是指：在A类里定义一个B类的引用，A拥有了B，叫组合。只是单纯的组合而已，而不是一种设计模式。
    组合和组合模式不是一回事！

    基本上见到的树形结构都使用到了组合模式。

角色：
    Leaf（叶子）：表示该节点下面没有其他子节点了，就称为叶子
    Compostie（容器构件）：容器构件，该节点下还有其他子节点，理解为一个容器，里面包含了其他子节点。就叫做容器构件
    Component（抽象构件）：抽象构件中定义了叶子和容器构件的共同点。比如，有公共的添加删除叶子功能，有显示节点功能。

3.什么情况下使用组合模式
       引用大话设计模式的片段：“当发现需求中是体现部分与整体层次结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑组合模式了。”

开发中应用场景：
    操作系统中的资源管理器
    GUI中的容器层次图
    XML文件解析
    OA系统中，组织结构的处理
    Junit单元测试框架

demo1_1 树形结构
    1)首先，定义一个抽象的Component。提供一系列的公共接口
    2)然后定义具体的叶子节点，和容器节点
      定义叶子节点，由于叶子节点中没有子节点了，所以不需要add和remove的具体实现
    3)再定义一个容器节点
    4)最后客户端测试代码：添加一个树形结构

demo1_2  剪发办卡
    首先，一张卡可以在总部，分店，加盟店使用，那么总部可以刷卡，分店也可以刷卡，加盟店也可以刷卡，这个属性结构的店面层级关系就明确啦。
    那么，总店刷卡消费与分店刷卡消费是一样的道理，那么总店与分店对会员卡的使用也具有一致性。
        1.我们的部件有，总店，分店，加盟店！
        2.我们的部件共有的行为是：刷会员卡
        3.部件之间的层次关系，也就是店面的层次关系是，总店下有分店、分店下可以拥有加盟店。
     有了我们这几个必要条件后，我的要求就是目前店面搞活动当我在总店刷卡后，就可以累积相当于在所有下级店面刷卡的积分总额。

    这样在累积所有子店面积分的时候，就不需要去关心子店面的个数了，也不用关系是否是叶子节点还是组合节点了，也就是说不管是总店刷卡，还是加盟店刷卡，都可以正确有效的计算出活动积分。

