一、外观模式介绍
面向对象的一个比较重要的法则：迪米特法则（最少知识原则）：一个软件实体应当尽可能少的与其他实体发生相互作用。

外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。说白了，就可以理解为封装
外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用

例1：股民炒股
    要让股民尽可能少的与股票直接打交道，给其提供一个蒙面(基金)，让股民跟蒙面(基金)打交道。这样就符合了迪米特法则，让股民尽可能少的与股票打交道了。
例2：客户喝茶
    客户要尽可能少的与子系统（开水，茶具，茶叶...）打交道，提供一个服务员，统一了喝茶的入口。
例3：公司注册流程
    就是找个代理公司来帮我们做这些事

三、开发中外观模式应用场景
其实外观模式就是我们常见的封装，在我们实际开发中，遇到的各种对子系统各模块封装的逻辑，都可以理解为外观模式
    JDBC封装后的，commons提供的DBUtils类
    Hibernate提供的工具类，Spring JDBC工具类等

一个系统可以有几个门面类
　　在门面模式中，通常只需要一个门面类，并且此门面类只有一个实例，换言之它是一个单例类。
    当然这并不意味着在整个系统里只有一个门面类，而仅仅是说对每一个子系统只有一个门面类。
    或者说，如果一个系统有好几个子系统的话，每一个子系统都有一个门面类，整个系统可以有数个门面类。

为子系统增加新行为
　　初学者往往以为通过继承一个门面类便可在子系统中加入新的行为，这是错误的！！！
    门面模式的用意是为子系统提供一个集中化和简化的沟通管道，而不能向子系统加入新的行为。
    比如医院中的接待员并不是医护人员，接待员并不能为病人提供医疗服务。

门面模式的优点
　　●松散耦合
　　  门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
　　●简单易用
　　  门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。
　　●更好的划分访问层次
　　  通过合理使用Facade，可以帮助我们更好地划分访问的层次。
      有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。

demo0 未使用外观模式
demo1_1 在demo0的基础上增加外观模式
