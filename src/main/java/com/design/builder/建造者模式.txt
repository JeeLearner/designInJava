建造者模式：
    1.建造模式是对象的创建模式。
      可以将一个产品的内部表象（internal representation）与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。
      [构建与表示分离，同构建不同表示]

     2.建造模式分成两个很重要的部分：
     　　1) 一个部分是Builder接口，这里是定义了如何构建各个部件，也就是知道每个部件功能如何实现，以及如何装配这些部件到产品中去；
     　　2) 另外一个部分是Director，Director是知道如何组合来构建产品，也就是说Director负责整体的构建算法，而且通常是分步骤地来执行。
     　　不管如何变化，建造模式都存在这么两个部分，一个部分是部件构造和产品装配，另一个部分是整体构建的算法。认识这点是很重要的，因为在建造模式中，强调的是固定整体构建的算法，而灵活扩展和切换部件的具体构造和产品装配的方式。
     　　再直白点说，建造模式的重心在于分离构建算法和具体的构造实现，从而使得构建算法可以重用。具体的构造实现可以很方便地扩展和切换，从而可以灵活地组合来构造出不同的产品对象。

组成：
    Builder 抽象建造者角色
    ConcreteBuilder 具体建造者角色
    Director 导演者角色
    Product 产品角色


应用场景：
　　1. 需要生成的产品对象有复杂的内部结构，每一个内部成分本身可以是对象，也可以仅仅是一个对象（即产品对象）的一个组成部分。
　　2. 需要生成的产品对象的属性相互依赖。建造模式可以强制实行一种分步骤进行的建造过程，因此，如果产品对象的一个属性必须在另一个属性被赋值之后才可以被赋值，使用建造模式是一个很好的设计思想。
　　3. 在对象创建过程中会使用到系统中的其他一些对象，这些对象在产品对象的创建过程中不易得到。

工作场景：
    StringBuilder类的apend方法
    SQL中的PreparedStatement
    JDOM中的DomBuilder、SAXBuilder


demo1_1
    客户端负责创建导演者和具体建造者对象。
    然后客户端把具体建造者对象交给导演者，导演者操作具体建造者，开始创建产品。
    当产品完成后，建造者把产品返还给客户端。

　　把创建具体建造者对象的任务交给客户端而不是导演者对象，是为了将导演者对象与具体建造者对象的耦合变成动态的，从而使导演者对象可以操纵数个具体建造者对象中的任何一个。

demo1_2
    使用场景：
        假设有一个电子杂志系统，定期地向用户的电子邮件信箱发送电子杂志。
        用户可以通过网页订阅电子杂志，也可以通过网页结束订阅。
        当客户开始订阅时，系统发送一个电子邮件表示欢迎，当客户结束订阅时，系统发送一个电子邮件表示欢送。
        本例子就是这个系统负责发送“欢迎”和“欢送”邮件的模块。

demo1_3
    使用场景：
        要创建一个保险合同的对象，里面很多属性的值都有约束，要求创建出来的对象是满足这些约束规则的。约束规则比如：保险合同通常情况下可以和个人签订，也可以和某个公司签订，但是一份保险合同不能同时与个人和公司签订。这个对象里有很多类似这样的约束，采用建造模式来构建复杂的对象，通常会对建造模式进行一定的简化，因为目标明确，就是创建某个复杂对象，因此做适当简化会使程序更简洁。大致简化如下：
        　　●　　由于是用Builder模式来创建某个对象，因此就没有必要再定义一个Builder接口，直接提供一个具体的建造者类就可以了。
        　　●　　对于创建一个复杂的对象，可能会有很多种不同的选择和步骤，干脆去掉“导演者”，把导演者的功能和Client的功能合并起来，也就是说,Client这个时候就相当于导演者，它来指导构建器类去构建需要的复杂对象。
     说明：
        在本例中将具体建造者合并到了产品对象中，并将产品对象的构造函数私有化，防止客户端不使用构建器来构建产品对象，而是直接去使用new来构建产品对象所导致的问题。
        另外，这个构建器的功能就是为了创建被构建的对象，完全可以不用单独一个类。

demo2_1
    使用场景：
        专门对外提供一种图形： Square(正方形)
        Square对象可以很简单（例如用户一要的就是一个蓝色的正方形），也可以非常复杂（形状、颜色、大小、边框、阴影、层次等等）。
        用户需要什么样的图形，只需要把对应的属性（长、宽、颜色...）告诉我就行...
     分析：
        1）通过构造函数可以实现
            问题：如果复杂的话需要大量构造函数。
        2）还有一种类似JavaBean的方法，即使用的时候通过set方法设置属性。
            问题：假设一些属性依赖另外一些属性，如果设置了属性A，但是没有设置属性B，那Square对象其实是有问题的。
        3）建造者模式，即开放一个静态内部类专门用来与外界打交道，来收集用户想要设置的参数并且做检查。