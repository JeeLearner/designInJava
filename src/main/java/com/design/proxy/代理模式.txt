
代理模式：
    为其他对象提供一种代理以便控制对这个对象的访问。
    可以详细控制访问某个类（对象）的方法，在调用这个方法前作的前置处理（统一的流程代码放到代理中处理）。调用这个方法后做后置处理。
    例如：明星的经纪人，租房的中介等等都是代理

分类：
    1.静态代理（静态定义代理类，我们自己静态定义的代理类。比如我们自己定义一个明星的经纪人类）
    2.动态代理（通过程序动态生成代理类，该代理类不是我们自己定义的。而是由程序自动生成）比较重要！！
            JDK自带的动态代理
            javaassist字节码操作库实现
            CGLIB
            ASM（底层使用指令，可维护性较差）

组成：
    抽象角色：指代理角色（经纪人）和真实角色（明星）对外提供的公共方法，一般为一个接口
    真实角色：需要实现抽象角色接口，定义了真实角色所要实现的业务逻辑，以便供代理角色调用。也就是真正的业务逻辑在此。
    代理角色：需要实现抽象角色接口，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。
              将统一的流程控制都放到代理角色中处理！

demo1_1静态代理代码实现
demo1_2动态代理代码实现
       动态代理是不需要定义代理角色的，通过一个处理器来处理代理角色的业务逻辑。

       1)JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，
       2)cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，
            但因为采用的是继承，所以不能对final修饰的类进行代理。