一、状态模式介绍
状态模式：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类
    状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。
    把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。
    当遇到不同的状态遇到不同的行为的时候，可以使用状态模式

角色：
    State（抽象状态类）：定义一个接口以封装与Context的一个特定状态相关的行为。
    ConcreteStateA，B，C（具体状态）：每一个子类实现一个不同的状态或行为
    Context（上下文）：维护一个State子类状态的实例，这个实例中定义了当前的状态。

开发中场景：
    银行系统中账号状态的管理
    OA系统中公文状态的管理
    酒店系统中，房间状态的管理
    线程对象各状态之间的切换

状态模式的好处：
    1、可以将不同状态的不同行为分割开来，将相关的行为进行局部化。以便更改局部状态
    2、消除了庞大的条件分支语句。

什么时候使用状态模式呢？
    当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。

扩展   认识状态模式
   ●状态和行为
    　　所谓对象的状态，通常指的就是对象实例的属性的值；而行为指的就是对象的功能，再具体点说，行为大多可以对应到方法上。
    　　状态模式的功能就是分离状态的行为，通过维护状态的变化，来调用不同状态对应的不同功能。也就是说，状态和行为是相关联的，它们的关系可以描述为：状态决定行为。
    　　由于状态是在运行期被改变的，因此行为也会在运行期根据状态的改变而改变。

   ●行为的平行性
    　　注意平行线而不是平等性。所谓平行性指的是各个状态的行为所处的层次是一样的，相互独立的、没有关联的，是根据不同的状态来决定到底走平行线的哪一条。行为是不同的，当然对应的实现也是不同的，相互之间是不可替换的。
    　　而平等性强调的是可替换性，大家是同一行为的不同描述或实现，因此在同一个行为发生的时候，可以根据条件挑选任意一个实现来进行相应的处理。
    　　大家可能会发现状态模式的结构和策略模式的结构完全一样，但是，它们的目的、实现、本质却是完全不一样的。还有行为之间的特性也是状态模式和策略模式一个很重要的区别，状态模式的行为是平行性的，不可相互替换的；而策略模式的行为是平等性的，是可以相互替换的。

   ● 环境和状态处理对象
    　　在状态模式中，环境(Context)是持有状态的对象，但是环境(Context)自身并不处理跟状态相关的行为，而是把处理状态的功能委托给了状态对应的状态处理类来处理。
    　　在具体的状态处理类中经常需要获取环境(Context)自身的数据，甚至在必要的时候会回调环境(Context)的方法，因此，通常将环境(Context)自身当作一个参数传递给具体的状态处理类。
    　　
        客户端一般只和环境(Context)交互。客户端可以用状态对象来配置一个环境(Context)，一旦配置完毕，就不再需要和状态对象打交道了。客户端通常不负责运行期间状态的维护，也不负责决定后续到底使用哪一个具体的状态处理对象。


demo1_1

demo1_2
    考虑一个在线投票系统的应用，要实现控制同一个用户只能投一票，
    如果一个用户反复投票，而且投票次数超过5次，则判定为恶意刷票，要取消该用户投票的资格，当然同时也要取消他所投的票；
    如果一个用户的投票次数超过8次，将进入黑名单，禁止再登录和使用系统。

    要使用状态模式实现，首先需要把投票过程的各种状态定义出来，
    根据以上描述大致分为四种状态：正常投票、反复投票、恶意刷票、进入黑名单。
    然后创建一个投票管理对象（相当于Context）。

    从上面的示例可以看出，状态的转换基本上都是内部行为，主要在状态模式内部来维护。
    比如对于投票的人员，任何时候他的操作都是投票，但是投票管理对象的处理却不一定一样，会根据投票的次数来判断状态，然后根据状态去选择不同的处理。