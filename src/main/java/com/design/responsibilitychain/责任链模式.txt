一、责任链模式介绍
    责任链模式：将能够处理同一类请求的对象连成一条链，使这些对象都有机会处理请求，所提交的请求沿着链传递。从而避免请求的
        发送者和接受者之间的耦合关系。链上的对象逐个判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象。
        直到有一个对象处理它为止。

     责任链可能是一条直线、一个环链或者一个树结构的一部分。

     责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。
     请求在这个链上传递，直到链上的某一个对象决定处理此请求。
     发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。

场景：
    1、打牌时，轮流出牌
    2、接力赛跑
    3、请假审批
    4、公文审批

角色：
 　　●　抽象处理者(Handler)角色：定义出一个处理请求的接口。
        如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。
        这个角色通常由一个Java抽象类或者Java接口实现。
        上图中Handler类的聚合关系给出了具体子类对下家的引用，抽象方法handleRequest()规范了子类处理请求的操作。

　　 ●　具体处理者(ConcreteHandler)角色：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。
        由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。

三、责任链模式总结
实现方式：
    1、链表方式：比如刚才的请假审批
    2、非链表方式：通过集合，数组生成责任链更加实用，将链表上的各个对象都添加到集合中，然后通过反射给构建出来。
        然后在容器里一个个的处理。（也就是说把测试代码中除了请假的其他代码都给用一个类来处理）

开发中常见场景：
    1、Java的异常机制就是一个责任链模式，一个try可以对应多个cathc。如果某一个catch不匹配，则跳到下一个catch中
    2、JavaScript语言中的事件的冒泡和捕获机制
    3、Servlet开发中，过滤器的链式处理
    4、Struts2中，拦截器的调用也是典型的责任链模式

责任链的好处：
    ​1、接受者和发送者都没有对方的明确信息，且链中的对象也并不知道链的结构，
        结果是责任链可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而不需要保持它所有的候选继承者，大大的降低了耦合度。
        请求者不用管具体哪个对象会处理，反正该请求肯定会被处理就行了
    2、可以随时增加或者修改处理一个请求的结构，增加了给对象指派职责的灵活性。

demo1_1
    这里以请假的流程为例，用责任链模式来实现
demo1_2
    当某人提出聚餐费用申请的请求后，该请求会在 项目经理—〉部门经理—〉总经理 这样一条领导处理链上进行传递，
    发出请求的人并不知道谁会来处理他的请求，每个领导会根据自己的职责范围，来判断是处理请求还是把请求交给更高级别的领导，
    只要有领导处理了，传递就结束了。

demo2_1 责任链模式在Tomcat中的应用 【这里是参考的Tomcat8.5.5】
    众所周知Tomcat中的Filter就是使用了责任链模式，创建一个Filter除了要在web.xml文件中做相应配置外，还需要实现javax.servlet.Filter接口。

    1）创建Filter接口
        Filter接口是所有具体过滤器必须实现的接口，该接口有一个核心的方法doFilter，方法对Request和Response进行处理，
        注意第三个参数类型为FilterChain，传入该参数的目的是为了责任能够传递到下一个过滤器。
    2）创建具体Filter：MyFilter
        首先根据需求对request和response进行处理，最后需要调用过滤器链中的doFilter方法以便责任能够传递到下一个过滤器。
        chain.doFilter(request,response)，注意这个doFilter是FilterChain中的doFilter与Filter中的doFilter没有任何关系，名字虽然相同，但是参数是不一样的。
        FilterChain中的doFilter只有Request和Response两个参数，其实更好的命名方式应该是chain.doNextFilter(resquest,response)

        那么，FilterChain是什么样的呢？我们上面已经看到了FilterChain的用法，
        也知道了FilterChain在调用doFilter(request,response)的时候需要有能力将任务传递到下一个Filter,因此我们可以推断，FilterChain中需要保存所有的Filter。
        在Tomcat的实现中，正是在FilterChain中用一个数组保存了所有的Filter,这不禁让我想起了java.util.ArrayList的实现。
    3）创建FilterChain接口
    4）创建FilterChain的实现类ApplicationFilter
         可以看出在FilterChain的实现中确实是用数组来保存所有的过滤器，
         但是并不是直接保存的Filter类型，而是保存的FilterConfig类型，可以把FilterConfig当做Filter的包装类，
         我们可以通过filterConfig.getFilter()拿到Filter实例。
         在internalDoFilter方法中我们看到了FilterChain是如何实现责任的传递的，通过pos和n这两个变量来判断有没有传递到过滤器链的最后面，如果没有到最后，则取出当前过滤器并调用filter.doFilter的方法，
         在前面MyFilter的实现当中，它的doFilter方法在最后又调用了chain.doFilter(),从而保证了过滤器链能够将责任传递到下一个过滤器中。
         pos和n这两个变量的作用又让我联想到了ArrayList中的迭代器的实现。
    5）测试Client
    实例可参考：https://blog.csdn.net/zhouyong0/article/details/7909456
                https://blog.csdn.net/abinge317/article/details/52882913




扩展：
    击鼓传花:
    　　击鼓传花是一种热闹而又紧张的饮酒游戏。在酒宴上宾客依次坐定位置，由一人击鼓，击鼓的地方与传花的地方是分开的，以示公正。开始击鼓时，花束就开始依次传递，鼓声一落，如果花束在某人手中，则该人就得饮酒。
    　　比如说，贾母、贾赦、贾政、贾宝玉和贾环是五个参加击鼓传花游戏的传花者，他们组成一个环链。击鼓者将花传给贾母，开始传花游戏。花由贾母传给贾赦，由贾赦传给贾政，由贾政传给贾宝玉，又贾宝玉传给贾环，由贾环传回给贾母，如此往复，如下图所示。当鼓声停止时，手中有花的人就得执行酒令。

    纯的与不纯的责任链模式
    　　一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一是承担责任，而是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又 把责任向下传的情况。
    　　在一个纯的责任链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的责任链模式里面，一个请求可以最终不被任何接收端对象所接收。
    　　纯的责任链模式的实际例子很难找到，一般看到的例子均是不纯的责任链模式的实现。
        有些人认为不纯的责任链根本不是责任链模式，这也许是有道理的。但是在实际的系统里，纯的责任链很难找到。
        如果坚持责任链不纯便不是责任链模式，那么责任链模式便不会有太大意义了。