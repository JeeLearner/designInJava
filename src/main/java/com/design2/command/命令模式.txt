一、命令模式介绍
命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志。以及支持可撤销的操作。
说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。

角色：
    Command（抽象命令类）：抽象出命令对象，可以根据不同的命令类型。写出不同的实现类
    ConcreteCommand（具体命令类）：实现了抽象命令对象的具体实现
    Invoker（调用者/请求者）：请求的发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令来之间
            存在关联。在程序运行时，将调用命令对象的execute() ，间接调用接收者的相关操作。
    Receiver（接收者）：接收者执行与请求相关的操作，真正执行命令的对象。具体实现对请求的业务处理。未抽象前，实际执行操作内容的对象。
    Client（客户端）：在客户类中需要创建调用者对象，具体命令类对象，在创建具体命令对象时指定对应的接收者。发送者和接收者之间没有之间关系。
            都通过命令对象来调用。

命令模式的优点
　　●更松散的耦合
　　  命令模式使得发起命令的对象——客户端，和具体实现命令的对象——接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。
　　●更动态的控制
　　  命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。
　　●很自然的复合命令
　　  命令模式中的命令对象能够很容易地组合成复合命令，也就是宏命令，从而使系统操作更简单，功能更强大。
　　●更好的扩展性
      由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。


三、应用场景
    Struts2中action中的调用过程中存在命令模式
    数据库中的事务机制的底层实现
    命令的撤销和恢复：增加相应的撤销和恢复命令的方法（比如数据库中的事务回滚）


demo1_1

demo1_2  AudioPlayer系统  录音机
    小女孩茱丽(Julia)有一个盒式录音机，此录音机有播音(Play)、倒带(Rewind)和停止(Stop)功能，录音机的键盘便是请求者(Invoker)角色；茱丽(Julia)是客户端角色，而录音机便是接收者角色。Command类扮演抽象命令角色，而PlayCommand、StopCommand和RewindCommand便是具体命令类。茱丽(Julia)不需要知道播音(play)、倒带(rewind)和停止(stop)功能是怎么具体执行的，这些命令执行的细节全都由键盘(Keypad)具体实施。茱丽(Julia)只需要在键盘上按下相应的键便可以了。
demo1_3  宏命令
    所谓宏命令简单点说就是包含多个命令的命令，是一个命令的组合。
    设想茱丽的录音机有一个记录功能，可以把一个一个的命令记录下来，再在任何需要的时候重新把这些记录下来的命令一次性执行，这就是所谓的宏命令集功能。因此，茱丽的录音机系统现在有四个键，分别为播音、倒带、停止和宏命令功能。此时系统的设计与前面的设计相比有所增强，主要体现在Julia类现在有了一个新方法，用以操作宏命令键。



